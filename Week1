Kadane’s Algorithm 
Largest Sum Contiguous Subarray 

Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum. 

Example 1: 

Input: 
N = 5 
Arr[] = {1,2,3,-2,5} 
Output: 
9 
Explanation: 
Max subarray sum is 9 
of elements (1, 2, 3, -2, 5) which  
is a contiguous subarray. 
 

Example 2: 

Input: 
N = 4 
Arr[] = {-1,-2,-3,-4} 
Output: 
-1 
Explanation: 
Max subarray sum is -1  
of element (-1) 

Your Task: 
You don't need to read input or print anything. The task is to complete the function maxSubarraySum() which takes Arr[] and N as input parameters and returns the sum of subarray with maximum sum. 
Expected Time Complexity: O(N) 
Expected Auxiliary Space: O(1) 
Constraints: 
1 ≤ N ≤ 106 
-107 ≤ A[i] ≤ 107 

class Solution{ 
    long maxSubarraySum(int arr[], int n){ 
        int max=arr[0]; 
        int currentMax=max; 
        for(int i=1;i<n;i++) { 
            currentMax = Math.max(currentMax+arr[i] , arr[i]); 
            max=Math.max(max,currentMax); 
        } 
        return max; 
    } 
} 


Nth node from end of linked list 

Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list. 

Example 1: 

Input: 
N = 2 
LinkedList: 1->2->3->4->5->6->7->8->9 
Output: 8 
Explanation: In the first example, there 
are 9 nodes in linked list and we need 
to find 2nd node from end. 2nd node 
from end os 8.   
 

Example 2: 

Input: 
N = 5 
LinkedList: 10->5->100->5 
Output: -1 
Explanation: In the second example, there 
are 4 nodes in the linked list and we 
need to find 5th from the end. Since 'n' 
is more than the number of nodes in the 
linked list, the output is -1. 

Your Task: 
The task is to complete the function getNthFromLast() which takes two arguments: reference to head and N and you need to return Nth from the end or -1 in case node doesn't exist.. 

Note: 
Try to solve in single traversal. 

Expected Time Complexity: O(N). 
Expected Auxiliary Space: O(1). 

Constraints: 
1 <= L <= 106 
1 <= N <= 106 

int getNthFromLast(Node head, int n) 
    { 
        if(head==null) return -1; 
        Node fast =head; 
        Node slow = head; 
        n-=1; 
        while(n-->0) { 
            if(fast.next==null) return -1; 
            fast=fast.next; 
        } 
        while(fast.next!=null) { 
            fast=fast.next; 
            slow=slow.next; 
        } 
        return slow.data; 
    } 


Find Pivot Index 

Given an array of integers nums, calculate the pivot index of this array. 
The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. 
If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array. 
Return the leftmost pivot index. If no such index exists, return -1. 

Example 1: 

Input: nums = [1,7,3,6,5,6] 
Output: 3 
Explanation: 
The pivot index is 3. 
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 
Right sum = nums[4] + nums[5] = 5 + 6 = 11 
 

Example 2: 

Input: nums = [1,2,3] 
Output: -1 
Explanation: 
There is no index that satisfies the conditions in the problem statement. 

Example 3: 

Input: nums = [2,1,-1] 
Output: 0 
Explanation: 
The pivot index is 0. 
Left sum = 0 (no elements to the left of index 0) 
Right sum = nums[1] + nums[2] = 1 + -1 = 0 
 
Constraints: 

1 <= nums.length <= 104 

-1000 <= nums[i] <= 1000 

class Solution { 
    public int pivotIndex(int[] nums) { 
        int total=0; 
        int sum=0; 
        for(int num : nums) total+=num; 
        for(int i=0;i<nums.length;sum+=nums[i++]) { 
            if(sum*2==total-nums[i]) 
                return i; 
        } 
        return -1; 
    } 
} 
